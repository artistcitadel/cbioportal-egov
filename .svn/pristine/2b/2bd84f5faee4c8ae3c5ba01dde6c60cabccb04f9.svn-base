<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC  
 "-//mybatis.org//DTD Mapper 3.0//EN"  
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
 
 <mapper namespace="research_item">
 	
 	<!-- 스키마 -->
	<select id="selectCatalogSchemaList" parameterType="map" resultType="hashmap">
		SELECT `SCHEMA`
		FROM	CC_CATALOG
		WHERE	1=1
		GROUP BY `SCHEMA`
	</select>
	
	<!-- 테이블 -->
	<select id="selectCatalogTableList" parameterType="map" resultType="hashmap">
		SELECT 	 CTG.SCHEMA
				,CTG.TABLE
				,CTG.TABLE_COMMENT
				,IFNULL(CONCAT(CTG.TABLE_COMMENT,CONCAT('-(',CTG.TABLE,')')),CTG.TABLE) AS TABLE_COMMENT_ID
		FROM	CC_CATALOG CTG
		WHERE	1=1
		<if test="SEARCH_SCHEMA != null and SEARCH_SCHEMA != ''">
		AND		CTG.SCHEMA = #{SEARCH_SCHEMA}
		AND 	(
			CTG.TABLE NOT IN (
			SELECT 	DTL.TABLE 
			FROM	CC_ITEM_CATE_DETL DTL
			WHERE	1=1
			AND 	DTL.SCHEMA=#{SEARCH_SCHEMA}
			)
			OR CTG.TABLE = #{SEARCH_TABLE}
		)
		</if>
		<!-- 2017-07-19 공통, 개인자료 테이블 제외 -->
		AND (
			SUBSTRING(CTG.TABLE,1,3) &lt;&gt; 'CC_' 
			AND 
			SUBSTRING(CTG.TABLE,1,2) &lt;&gt; 'TM'
		)
		GROUP BY CTG.SCHEMA
				,CTG.TABLE		
				,CTG.TABLE_COMMENT
		ORDER BY CTG.SCHEMA
				,CTG.TABLE	
	</select>
	
	<!-- 컬럼 -->
	<select id="selectCatalogColumnList" parameterType="map" resultType="hashmap">
		SELECT 	 CTG.`SCHEMA`
				,CTG.`TABLE`
				,CTG.TABLE_COMMENT
				,CTG.`COLUMN`
				,CTG.COLUMN_COMMENT
				,CTG.DATA_TYPE
				,CTG.DATA_TYPE_LENGTH
				,CTG.`ORDER`
				,CTG.IS_PK
				,CTG.IS_NULLABLE
				,CTG.COLUMN_DEFAULT
				,CTG.CRT_DT
		FROM	CC_CATALOG CTG
		WHERE	1=1
		AND 	CTG.`SCHEMA`=#{SEARCH_SCHEMA}
		AND 	CTG.`TABLE`=#{SEARCH_TABLE}
		AND 	NOT EXISTS
		(
			SELECT   ITM.`SCHEMA`
					,ITM.`TABLE`
					,ITM.`COLUMN` 
			FROM 	CC_ITEM_MGMT ITM
			WHERE 	1=1
			AND 	ITM.`SCHEMA`=CTG.`SCHEMA`
			AND 	ITM.`TABLE`=CTG.`TABLE`
			AND 	ITM.`COLUMN`=CTG.`COLUMN`
		)           
		ORDER BY CTG.TABLE ASC
	</select>
	<insert id="insertItemMgmt" parameterType="map">
		INSERT INTO CC_ITEM_MGMT
		(
			 `SCHEMA`
			,`TABLE`
			,TABLE_COMMENT
			,`COLUMN`
			,COLUMN_COMMENT
			,DATA_TYPE
			,ITEM_NM
			,`ORDER`
			,SEARCH_YN
			,ITEM_TYPE
			,CODE_TYPE
			,CODE_SET
			,POPUP_YN
			,POPUP_PROGRAM_ID
			,UPPER_TABLE
			,UPPER_COLUMN
			,GMEC_YN
			,HCC_YN
			,SYNONYM_YN
			,ITEM_DESC
			,CS_REPEAT_YN
			,CH_DEFAULT_YN
			,CH_CENSORING_YN	
			,ITEM_CATE_SEQ
			,ITEM_CATE_DETL_SEQ
			,CRT_ID
			,CRT_DT
			,UDT_ID
			,UDT_DT
			,POPUP_COLUMN
		)
		SELECT 	A.SCHEMA,
				A.TABLE,
				A.TABLE_COMMENT,
				A.COLUMN ,
				A.COLUMN_COMMENT,
				A.DATA_TYPE,
				CASE WHEN COLUMN_COMMENT IS NULL THEN A.COLUMN  
					 ELSE COLUMN_COMMENT 	
				END AS ITEM_NM,
				
				0 AS ORDINAL_POSITION,/*A.ORDINAL_POSITION,*/
				CASE WHEN LEFT(A.TABLE, 3) IN ('CC_') THEN 'N' 
					 ELSE 'Y' 	
				END AS SEARCH_YN,
				
				CASE WHEN LEFT(DATA_TYPE, 3) IN ('CHA','BOO') THEN 'COD'  
					 WHEN LEFT(DATA_TYPE, 3) IN ('NUM','INT','FLO') THEN 'NUM' 
					 WHEN LEFT(DATA_TYPE, 3) IN ('DAT','TIM') THEN 'DAT'  
					 WHEN LEFT(DATA_TYPE, 3) IN ('VAR') THEN 'TEX'	 
					 ELSE 'ETC' 
				END AS ITEM_TYPE,
				'' AS CODE_TYPE,
				'' AS CODE_SER,		
				CASE WHEN LEFT(DATA_TYPE, 3) IN ('CHA','BOO') THEN 'Y'  
					 ELSE 'Y' 
				END AS POPUP_YN,
				
				'' AS POPUP_PROGRAM_ID,
				'' AS UPPER_TABLE,
				'' AS UPPER_COLUMN,
				'N' AS GMEC_YN,     -- 중요
				'N' AS HCC_YN,     -- 다빈도
				CASE WHEN LEFT(DATA_TYPE, 3) = 'VAR' AND DATA_TYPE_LENGTH > 2000 THEN 'Y' 
					 ELSE 'N' 
				END AS SYNONYM_YN,
				
				CASE WHEN COLUMN_COMMENT IS NULL THEN A.COLUMN 			 
					 ELSE COLUMN_COMMENT 		
				END AS ITEM_DESC,
				
				'' AS CS_REPEAT_YN,
				'' AS CH_DEFAULT_YN,
				'' AS CH_CENSORING_YN,
				#{ITEM_CATE_SEQ},
				#{ITEM_CATE_DETL_SEQ},
				/*
				IFNULL(B.ITEM_CATE_SEQ,0) AS ITEM_CATE_SEQ,
				IFNULL(B.SEQ,0) AS ITEM_CATE_DETL_SEQ,
				*/
				#{CRT_ID} AS CRT_ID,
				NOW() AS CRT_DT,
				#{UDT_ID} AS UDT_ID,
				NOW() AS UDT_DT,
				'' AS POPUP_COLUMN
		FROM 	CC_CATALOG A
		LEFT OUTER JOIN CC_ITEM_CATE_DETL B ON (A.`SCHEMA`=B.`SCHEMA` AND A.`TABLE`=B.`TABLE`)
		WHERE	1=1
		AND 	A.SCHEMA=#{SCHEMA}
		AND 	A.TABLE=#{TABLE}
		AND 	A.COLUMN=#{COLUMN}
	</insert>
	
	<!-- 연구항목관리 -->
	<select id="selectItemMgmtList" parameterType="map" resultType="hashmap">
		SELECT 	 distinct A.SEQ                     /* 연구항목 일련번호 */
				,A.SCHEMA                /* 스키마명 */
				,A.TABLE                 /* 테이블명 */
				,A.TABLE_COMMENT           /* 테이블설명 */
				,A.COLUMN                /* 컬럼명 */
				,A.COLUMN_COMMENT          /* 컬럼설명 */
				,A.DATA_TYPE               /* Data Type */
				,A.ITEM_NM                 /* 항목명 */
				,A.ORDER	                 /* 출력순서 */
				,A.SEARCH_YN               /* 검색여부 */
				,A.ITEM_TYPE               /* 항목종류 */
				,A.CODE_TYPE               /* 코드종류 */
				,A.CODE_SET                /* 코드셋 */
				,A.POPUP_YN                /* 항목선택 팝업창 여부 */
				,A.POPUP_PROGRAM_ID        /* 팝업 ID */
				,A.UPPER_TABLE             /* 상위테이블 */
				,A.UPPER_COLUMN            /* 상위컬럼 */
				,A.GMEC_YN                 /* 중요여부 */
				,A.HCC_YN                  /* 다빈도 여부 */
				,A.SYNONYM_YN              /* 동의어 적용 여부 */
				,A.ITEM_FIRST_YN			/* 최초 적용 여부 */
				,A.ITEM_DESC               /* 항목설명 */
				,A.CS_REPEAT_YN            /* 단면연구 반복데이터 조건 여부 */
				,A.CH_DEFAULT_YN           /* 코호트연구 기본 연구항목 여부 */
				,A.CH_CENSORING_YN         /* 코호트연구 중도절단 연구항목 여부 */
				,A.UDT_DT                  /* 수정일자 */
				,A.ITEM_CATE_SEQ           /* 대분류 SEQ*/
				,A.ITEM_CATE_DETL_SEQ      /* 중분류 SEQ*/
				,B.CATE_NM AS ITEM_CATE_NM
				,C.CATE_NM AS ITEM_CATE_DETL_NM
				,A.BASE_DT_COLUMN		   /* 기준일자*/
				,A.UDT_ID                  /* 수정자 */
				,A.CRT_ID                  /* 등록일자*/
				,A.CRT_DT                  /* 등록자 */
				,'INC' AS INCLUDE_YN	
				,'AND' AS ANDOR_YN		
				,A.POPUP_COLUMN
				,A.INSTCD_YN
		FROM	CC_ITEM_MGMT A
		LEFT OUTER JOIN CC_ITEM_CATE B ON (A.ITEM_CATE_SEQ=B.SEQ)
		LEFT OUTER JOIN CC_ITEM_CATE_DETL C ON (A.ITEM_CATE_DETL_SEQ=C.SEQ)
		WHERE	1=1
		<if test="SEARCH_SCHEMA != null and SEARCH_SCHEMA != ''">
		AND 	A.`SCHEMA` = #{SEARCH_SCHEMA}
		</if>
		<if test="SEARCH_TABLE != null and SEARCH_TABLE != ''">
		AND 	A.`TABLE` = #{SEARCH_TABLE}
		</if>
		<if test="SEARCH_ITEM_CATE_SEQ != null and SEARCH_ITEM_CATE_SEQ != ''">
		AND 	A.ITEM_CATE_SEQ = #{SEARCH_ITEM_CATE_SEQ}
		</if>
		<if test="SEARCH_ITEM_CATE_DETL_SEQ != null and SEARCH_ITEM_CATE_DETL_SEQ != ''">
		AND 	A.ITEM_CATE_DETL_SEQ = #{SEARCH_ITEM_CATE_DETL_SEQ}
		</if>
		<if test="SEARCH_SEQ != null and SEARCH_SEQ != ''">
		AND 	A.SEQ = #{SEARCH_SEQ}
		</if>
		
		
		<if test="SEARCH_YN != null and SEARCH_YN != ''">
		${SEARCH_YN}
		</if>
		
		<if test="SEARCH_VAL != null and SEARCH_VAL != ''">
			<choose>
				<when test="SEARCH_KEY == '001'">
					AND A.`COLUMN` LIKE CONCAT(#{SEARCH_VAL},'%')
				</when>
				<when test="SEARCH_KEY == '002'">
					AND A.COLUMN_COMMENT LIKE CONCAT(#{SEARCH_VAL},'%')
				</when>
				<when test="SEARCH_KEY == '003'">
					AND A.ITEM_NM LIKE CONCAT(#{SEARCH_VAL},'%')
				</when>
				
				<otherwise>
					AND 
					(
						A.`COLUMN` LIKE CONCAT(#{SEARCH_VAL},'%')
						OR A.COLUMN_COMMENT LIKE CONCAT(#{SEARCH_VAL},'%')
						OR A.ITEM_NM LIKE CONCAT(#{SEARCH_VAL},'%')
					)
				
				</otherwise>
			</choose>
		
		</if>
		
		
		<if test="SEARCH_SYNONYM_YN != null and SEARCH_SYNONYM_YN != ''">
		AND 	A.SYNONYM_YN = #{SEARCH_SYNONYM_YN}
		</if>
		
		<if test="SEARCH_ITEM_SEL_TYPE != null and SEARCH_ITEM_SEL_TYPE != ''">
			<choose>
				<when test="SEARCH_ITEM_SEL_TYPE == 'GMEC'">
					AND 	A.GMEC_YN = 'Y'
				</when>
				
				<when test="SEARCH_ITEM_SEL_TYPE == 'HCC'">
					AND 	A.HCC_YN = 'Y'
				</when>
			</choose>
		</if>
		
		
		<if test="SEARCH_PERIOD_COLUMN != null and SEARCH_PERIOD_COLUMN != ''">
		AND CONCAT(A.`TABLE`,'__',A.`COLUMN`) = #{SEARCH_PERIOD_COLUMN}
		</if>
		
		<!-- TAB CD C:조건,P:주기,R:연구항목 -->
		<if test="SEARCH_TAB_CD != null and SEARCH_TAB_CD != ''">
		AND A.TAB_CD = #{SEARCH_TAB_CD}
		</if>
		
		<!-- 내원정보 - 미내원은 생존분석에서 사용 -->
		<if test="SEARCH_ITEM_CATE_DETL_SEQ == 2">
		AND A.ITEM_NM &lt;&gt; '미내원'
		</if>
		
		ORDER BY A.`SCHEMA`,A.`TABLE`, A.ORDER ASC

	</select>
	
	<update id="updateItemMgmt" parameterType="map">
		UPDATE 	 CC_ITEM_MGMT ITM
		SET		 ITM.ITEM_NM			=IFNULL(#{ITEM_NM}         ,ITM.ITEM_NM			)
				,ITM.COLUMN_COMMENT		=IFNULL(#{COLUMN_COMMENT}         ,ITM.COLUMN_COMMENT			)
				,ITM.ITEM_DESC			=IFNULL(#{ITEM_DESC}       ,ITM.ITEM_DESC		)
				,ITM.SEARCH_YN			=IFNULL(#{SEARCH_YN}       ,ITM.SEARCH_YN		)
				,ITM.ITEM_TYPE			=IFNULL(#{ITEM_TYPE}       ,ITM.ITEM_TYPE		)
				,ITM.ORDER				=IFNULL(#{ORDER}           ,ITM.ORDER			)
				,ITM.CODE_TYPE			=IFNULL(#{CODE_TYPE}       ,ITM.CODE_TYPE		)
				,ITM.CODE_SET			=IFNULL(#{CODE_SET}        ,ITM.CODE_SET		)
				,ITM.POPUP_YN			=IFNULL(#{POPUP_YN}        ,ITM.POPUP_YN		)
				,ITM.POPUP_PROGRAM_ID	=IFNULL(#{POPUP_PROGRAM_ID},ITM.POPUP_PROGRAM_ID)
				,ITM.UPPER_TABLE		=IFNULL(#{UPPER_TABLE}     ,ITM.UPPER_TABLE		)
				,ITM.UPPER_COLUMN		=IFNULL(#{UPPER_COLUMN}    ,ITM.UPPER_COLUMN	)
				,ITM.GMEC_YN			=IFNULL(#{GMEC_YN}         ,ITM.GMEC_YN			)
				,ITM.HCC_YN				=IFNULL(#{HCC_YN}          ,ITM.HCC_YN			)
				,ITM.SYNONYM_YN			=IFNULL(#{SYNONYM_YN}      ,ITM.SYNONYM_YN		)
				,ITM.ITEM_FIRST_YN		=IFNULL(#{ITEM_FIRST_YN}   ,ITM.ITEM_FIRST_YN	)
				,ITM.BASE_DT_COLUMN		=IFNULL(#{BASE_DT_COLUMN}  ,ITM.BASE_DT_COLUMN	)
				,ITM.POPUP_COLUMN		=IFNULL(#{POPUP_COLUMN}         ,ITM.POPUP_COLUMN	)
				,ITM.INSTCD_YN			=IFNULL(#{INSTCD_YN}         ,ITM.INSTCD_YN			)
				,ITM.UDT_DT				=NOW()
				,ITM.UDT_ID				=#{UDT_ID} 
				
		WHERE	1=1
		AND 	ITM.SCHEMA = #{SCHEMA}
		AND 	ITM.TABLE = #{TABLE}
		<if test="SEQ != null and SEQ != ''">
		AND 	ITM.SEQ = #{SEQ}
		</if>
	
	</update>
	<select id="selectItemCateList" parameterType="map" resultType="hashmap">
		SELECT 	A.SEQ
				,A.CATE_NM
				,A.ORDER
				,A.CRT_DT
				,A.CRT_ID
				,A.UDT_ID
				,A.UDT_DT
		FROM	CC_ITEM_CATE A
		WHERE 	1=1
		ORDER BY A.ORDER ASC
	
	</select>
	<select id="selectItemCateDetlList" parameterType="map" resultType="hashmap" >
		SELECT	 A.SEQ
				,A.ITEM_CATE_SEQ
				,A.CATE_NM
				,A.ORDER
				,A.SCHEMA
				,A.TABLE
				,A.TABLE_COMMENT
				,CONCAT(A.TABLE_COMMENT,CONCAT(' (',A.TABLE,')')) AS TABLE_COMMENT_ID
				,A.BASE_DT_COLUMN
				,A.UDT_DT
				,A.UDT_ID
				,A.CRT_ID
				,A.CRT_DT
		FROM 	CC_ITEM_CATE_DETL A
		WHERE	1=1
		AND 	A.ITEM_CATE_SEQ=#{SEARCH_ITEM_CATE_SEQ}
		ORDER BY A.ORDER ASC
	</select>
	
	<insert id="insertItemCate" parameterType="map">
		INSERT INTO CC_ITEM_CATE
		(
			CATE_NM
			,`ORDER`
			,UDT_ID
			,CRT_ID
			,UDT_DT
			,CRT_DT
		)
		VALUES
		(
			 #{CATE_NM}
			,999
			,#{UDT_ID}
			,#{CRT_ID}
			,NOW()
			,NOW()
		)
	
	</insert>
	<update id="updateItemCate" parameterType="map">
		UPDATE 	 CC_ITEM_CATE
		SET		 CATE_NM= #{CATE_NM}
				,`ORDER` = IFNULL(#{ORDER},999)
				,UDT_ID=#{UDT_ID}
				,UDT_DT=NOW()
		WHERE	1=1
		AND 	SEQ=#{SEQ}
	</update>
	<delete id="deleteItemCate" parameterType="map">
		DELETE FROM CC_ITEM_CATE
		WHERE	1=1
		AND 	SEQ=#{SEQ} 
	
	</delete>
	
	<!-- 중분류 등록 -->
	<insert id="insertItemCateDetl" parameterType="map">
		INSERT INTO CC_ITEM_CATE_DETL
		(
			ITEM_CATE_SEQ
			,CATE_NM
			,`ORDER`
			,`SCHEMA`
			,`TABLE`
			,TABLE_COMMENT
			,BASE_DT_COLUMN
			,INSTCD_YN
			,UDT_DT
			,UDT_ID
			,CRT_DT
			,CRT_ID
		)
		SELECT 	#{ITEM_CATE_SEQ}
				,#{CATE_NM}
				,(
					SELECT  IFNULL(MAX(`ORDER`) + 1,1)
					FROM	CC_ITEM_CATE_DETL
					WHERE 	1=1
					AND 	ITEM_CATE_SEQ=#{ITEM_CATE_SEQ}
				) AS ORDER_SEQ
				,A.`SCHEMA`
				,A.`TABLE`
				,A.TABLE_COMMENT
				,#{BASE_DT_COLUMN}
				,#{INSTCD_YN}
				,NOW() AS UDT_DT
				,#{UDT_ID}
				,NOW()
				,#{CRT_ID}
		FROM	CC_CATALOG A
		WHERE 	1=1
		AND 	A.`SCHEMA` = #{SCHEMA}
		AND     A.`TABLE` = #{TABLE}
		GROUP BY A.`SCHEMA`
				,A.`TABLE`
				,A.TABLE_COMMENT
		
	</insert>
	
	<!-- 중분류 수정 -->
	<update id="updateItemCateDetl" parameterType="map">
		UPDATE 	 CC_ITEM_CATE_DETL DTL
		SET 	 DTL.SCHEMA			= #{SCHEMA}
				,DTL.TABLE			= #{TABLE} 
				,DTL.CATE_NM		= IFNULL(#{CATE_NM},DTL.CATE_NM)
				,DTL.ORDER			= IFNULL(#{ORDER},DTL.ORDER)
				,DTL.BASE_DT_COLUMN = IFNULL(#{BASE_DT_COLUMN},DTL.BASE_DT_COLUMN)
				,INSTCD_YN			= #{INSTCD_YN}
				,DTL.UDT_DT    		= NOW()
				,DTL.UDT_ID    		= #{UDT_ID}
		WHERE	1=1
		AND 	DTL.SEQ = #{SEQ}
	</update>
	
	<!-- 중분류 삭제 -->
	<delete id="deleteItemCateDetl" parameterType="map">
		DELETE FROM CC_ITEM_CATE_DETL
		WHERE	1=1
		AND 	SEQ=#{SEQ}
	</delete>
	<delete id="deleteItemMgmt" parameterType="map">
		DELETE FROM 	 CC_ITEM_MGMT
		WHERE	1=1
		AND 	SEQ=#{SEQ}
	</delete>
	
	<select id="selectCatalogColumnDateList" resultType="hashmap"
		parameterType="map">
		SELECT 	 CTG.SCHEMA 
				,CTG.TABLE 
				,CTG.TABLE_COMMENT 
				,CTG.COLUMN
				,CTG.COLUMN_COMMENT 
				,CTG.DATA_TYPE
		FROM 	CC_CATALOG CTG 
		WHERE 	1=1 
		AND DATA_TYPE IN ('date','timestamp') 
		AND CTG.SCHEMA = #{SEARCH_SCHEMA} 
		AND CTG.TABLE = #{SEARCH_TABLE}
		GROUP BY CTG.SCHEMA 
				,CTG.TABLE 
				,CTG.TABLE_COMMENT 
				,CTG.COLUMN
				,CTG.COLUMN_COMMENT

	</select>
	
	<select id="selectItemMgmtTableList" parameterType="map"
		resultType="hashmap">
		SELECT
			A.SCHEMA,
			A.TABLE AS VALUE,
			CASE	WHEN A.TABLE_COMMENT IS NULL THEN A.TABLE
					ELSE CONCAT(A.TABLE,'(',A.TABLE_COMMENT,')')
			END AS TEXT
		FROM
			CC_ITEM_MGMT A
		WHERE
			1 = 1
			AND A.TABLE NOT LIKE 'CC%'
			AND A.TABLE NOT LIKE 'TM%'
		GROUP BY
			A.SCHEMA,
			A.TABLE
	</select>
	
	<select id="selectItemMgmtColumnList" parameterType="map"
		resultType="hashmap">
		SELECT 	A.SCHEMA,A.TABLE,A.COLUMN AS VALUE,A.COLUMN_COMMENT AS TEXT
		FROM 	CC_ITEM_MGMT A
		WHERE 	1=1
		AND 	A.TABLE=#{SEARCH_TABLE}
		GROUP BY A.SCHEMA,A.TABLE,A.COLUMN
	</select>

</mapper>
 
 
 